package init

import "fmt"

var v1 int    //单一声明变量

//多个变量一起声明
var (
	v2 int
	v3 string
)

/*
 ------------数据类型----------------
*/

var v4 int  // 整型     默认为 0
var v5 string  //字符串  默认为 空字符串
var v6 bool    //布尔型    默认为 false
var v7 [10]int  //数组，数组元素类型为整型    默认为 [0,0,0,0,0,0,0,0,0,0]
var v8 struct{
	f float64
}               // 结构体，成员变量f的类型为64位浮点型    默认为 {0}
var v9 *int    //指针，指向整型    默认为 <nil>
var v10 map[string]int   //map（字典），key为字符串类型，value为整型   默认为 map[]
var v11 func(a int) int   //函数，参数类型为整型，返回值类型为整型    默认为 <nil>

/*
    变量名包含多个单词，首个小写，之后每个单词首字母大写 （小驼峰命名法）
  如果全局变量希望能够被外部包使用，则需要将首个单词的首字母大写
*/

/*
----------------变量初始化-----------------
*/

var v111 int =  10      //方式一：常规的初始化操作
var v112  = 10          //方式二：此时变量类型会被编译器自动推导出来
//z111 := 10              //方式三，可以省略var，编译器可以自动推导出v113的类型   :=这个只能用于方法内，全局变量只能通过var关键字定义

func main() {
	j := 222
	fmt.Println(j)
}


/**
----------------------变量赋值与多重赋值----------------------------
 */
//var a1 int
//a1 = 123
// 上面为变量赋值过程

//多重赋值
//s ,d = d, s
//这即为多重赋值 把 s 的值给到 d    把 d 的值给到 s


/**
----------------------------匿名变量-------------------------------------------
 */
/*
   在使用传统的强类型语言时，经常会出现这种情况，即在调用函数时为了获取一个值，
        却因为该函数返回多个值而不得不定义一堆没用的变量

    在Go语言中，可以通过结合使用多重赋值 和匿名变量来 避免这种丑陋的写法， 让代码看起来更优雅，
  匿名变量则通过下划线  _   来声明，任何赋予它的值都会被丢弃
*/
// 在php中，可以通过list 函数实现类似的功能

//eg: 假设 GetName() 函数的定义如下，它返回两个值，分别为username 和 nickName
//func GetName(userName, nickName string) {
//	return "nonfu", "wandx"
//}
//_, nickName := GetName()


/*
----------------------------变量的作用域-------------------------------------
*/

/**
    作用域： 每个变量在程序中都有一定的作用范围
   全局变量： 如果一个变量在函数体外声明
             可以在整个包甚至外部包（变量名以大写字母开头）使用，
              不管你声明在哪个源文件里 或在哪个源文件里调用。
   局部变量： 在函数体内声明的变量，作用域只在函数体内，参数和返回值变量也是局部变量；

    尽管变量的标识符必须时唯一的，单可以在某个代码块的内层代码块中使用相同名称的变量，
    则此时外部的同名变量将会暂时隐藏（结束内部代码块的执行后隐藏的外部同名变量又会出现，而内部同名变量则被释放）
    你任何的操作都只会影响内部代码块的局部变量
 */




